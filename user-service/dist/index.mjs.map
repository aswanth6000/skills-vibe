{"version":3,"sources":["../src/index.ts","../src/routes/authRoutes.ts","../src/models/User.ts","../src/controller/authController.ts","../src/config/nodemailer.ts","../src/events/messages/rabbitMQ.ts","../src/events/publisher/userMessagePublisher.ts","../src/routes/userRoutes.ts","../src/config/cloudinary.ts","../src/controller/userController.ts","../src/events/publisher/userPublisher.ts","../src/events/consumer/userGigConsumer.ts","../src/models/GigUser.ts","../src/events/publisher/orderPublisher.ts","../src/config/multer.ts"],"sourcesContent":["import express from 'express';\r\nimport dotenv from 'dotenv'\r\nimport mongoose from 'mongoose'\r\nimport router from './routes/authRoutes'\r\nimport userRouter from './routes/userRoutes';\r\nimport userController from './controller/userController';\r\nimport cors from 'cors';\r\nconst app = express();\r\napp.use(cors())\r\n\r\n\r\ndotenv.config()\r\napp.use(express.urlencoded({ extended: true }))\r\napp.use(express.json());\r\nconst PORT = process.env.PORT || 8001;\r\n\r\nuserController.setup()\r\nuserController.gigAccept()\r\nuserController.gigReject()\r\nuserController.gigDeleteEvent()\r\napp.use(router)\r\napp.use(userRouter)\r\n\r\n\r\n\r\nconst mongoUrl: string | undefined = process.env.MONGO_URL\r\n\r\n\r\n\r\nif (!mongoUrl) {\r\n    console.error('MongoDB connection URL is not defined.');\r\n    process.exit(1);\r\n  }\r\n\r\nmongoose.connect(mongoUrl).then(()=>{\r\n    console.log('database connected..');\r\n})\r\n.catch((err)=>{\r\n    console.log(\"Database connection error\", err);\r\n    \r\n})\r\n\r\n\r\n\r\napp.listen(PORT, ()=>{\r\n    console.log(`server running on ${PORT}`);\r\n})","import express from \"express\";\r\nimport authController from \"../controller/authController\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/user/signup\", authController.signup);\r\nrouter.post(\"/user/login\", authController.login);\r\nrouter.post('/user/sendotp', authController.sendOtp);\r\nrouter.post('/user/submitotp', authController.submitOtp);\r\nrouter.post('/user/submitpassword', authController.changePassword)\r\n\r\nexport default router;\r\n","import { Schema, model, Types, ObjectId } from \"mongoose\";\r\nimport { User } from \"../types/usertypes\";\r\n\r\n\r\nconst skillSchema = new Schema({\r\n  value: String,\r\n  label: String,\r\n});\r\n\r\nconst userSchema = new Schema<User>({\r\n  username: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  otp: {\r\n    type: String,\r\n  },\r\n  phone: {\r\n    type: Number,\r\n  },\r\n  description: {\r\n    type: String\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n  },\r\n  profilePicture: {\r\n    type: String,\r\n    default: 'https://res.cloudinary.com/dihrwghx2/image/upload/v1699291554/admin-user-react/default-pic_rkk3gl.jpg'\r\n  },\r\n  role: {\r\n    type: Boolean,\r\n  },\r\n  createdAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  updatedAt: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n  status: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  clients: [{\r\n    type: Types.ObjectId,\r\n    ref: \"User\", // Assuming 'User' is the name of the model\r\n  }],\r\n  skills: {\r\n    type: [skillSchema], // Expecting an array of skillSchema objects\r\n    default: [],\r\n  },\r\n  availability: {\r\n    type: Boolean,\r\n  },\r\n  portfolio: {\r\n    type: Schema.Types.ObjectId,\r\n    ref: \"Portfolio\", // Assuming 'Portfolio' is the name of the model\r\n  },\r\n  orders: {\r\n    type: Schema.Types.ObjectId,\r\n  },\r\n  ordersRecieved: {\r\n    type: Schema.Types.ObjectId,\r\n  },\r\n});\r\n\r\nconst UserModel = model<User>(\"User\", userSchema);\r\n\r\nexport { User, UserModel };\r\n","import { Request, Response } from \"express\";\r\nimport { UserModel } from \"../models/User\";\r\nimport bcrypt from 'bcrypt'\r\nimport jwt, { JwtPayload, Secret } from 'jsonwebtoken'\r\nimport dotenv from 'dotenv'\r\nimport transporter from '../config/nodemailer'\r\nimport userMessagePublisher from \"../events/publisher/userMessagePublisher\";\r\n\r\ndotenv.config()\r\n\r\nconst jwtSecret: Secret = process.env.JWT_KEY || 'defaultSecret'\r\n\r\n\r\nconst authController = {\r\n  // @DESC users can signup to the website by validation\r\n  // @METHOD  post\r\n  // @PATH /signup\r\n  async signup(req: Request, res: Response) {\r\n    const { email, username, google } = req.body;\r\n    try {\r\n      if (google === true) {\r\n        const user = await UserModel.findOne({ email });\r\n\r\n        if (!user) {\r\n          const newUser = new UserModel({\r\n            username: username,\r\n            email: email,\r\n          });\r\n\r\n          await newUser.save();\r\n          userMessagePublisher.userMessageEvent(newUser)\r\n\r\n\r\n          console.log('User created');\r\n          const token = jwt.sign({ userId: newUser._id }, jwtSecret, { expiresIn: '1h' });\r\n\r\n          res.status(201).json({ user: newUser, token });\r\n        } else {\r\n          console.log('User already exists');\r\n          res.status(200).json({ user, message: 'User already exists.' });\r\n        }\r\n      } else {\r\n        const { email, username, password, phone } = req.body;\r\n        const user = await UserModel.findOne({ email });\r\n        const hashedPassword = await bcrypt.hash(password, 10)\r\n        if (!user) {\r\n\r\n          const newUser = new UserModel({\r\n            username: username,\r\n            email: email,\r\n            phone,\r\n            password: hashedPassword,\r\n            status: true\r\n          });\r\n\r\n          await newUser.save();\r\n          userMessagePublisher.userMessageEvent(newUser)\r\n\r\n          console.log('User created');\r\n          res.status(201).json({ user: 'created' });\r\n        } else {\r\n          console.log('User already exists');\r\n          res.status(200).json({ message: 'User already exists.' });\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      res.status(500).send('Internal Server Error');\r\n    }\r\n  },\r\n\r\n  // @DESC users can login to the website by validation\r\n  // @METHOD  post\r\n  // @PATH /login\r\n\r\n  async login(req: Request, res: Response) {\r\n    const { email, password, google } = req.body;\r\n    if (google === false) {\r\n      try {\r\n        const adminUserName = process.env.ADMIN;\r\n        const adminPass = process.env.ADMIN_PASS;\r\n        if (email === adminUserName && password === adminPass) {\r\n          const role = 'admin'\r\n          const payload = {\r\n            admin: adminUserName,\r\n            role\r\n          }\r\n          const token = jwt.sign(payload, jwtSecret, { expiresIn: '1h' })\r\n          return res.status(204).json({ token, admin: 'admin data' });\r\n        } else {\r\n          const role = 'user'\r\n          const user = await UserModel.findOne({ email }).exec();\r\n          if (!user) {\r\n            return res.status(203).json({ message: 'User not found' });\r\n          }\r\n          if (!user.status) {\r\n            return res.status(207).json({ message: 'User is blocked by admin' });\r\n          }\r\n          const validPassword = await bcrypt.compare(password, user.password);\r\n          if (!validPassword) {\r\n            return res.status(203).json({ message: 'Invalid Password' });\r\n          }\r\n          const payload = {\r\n            userId: user._id,\r\n            email: user.email,\r\n            username: user.username,\r\n            status: user.status,\r\n            role\r\n          }\r\n          const token = jwt.sign(payload, jwtSecret, { expiresIn: '1h' });\r\n          res.cookie('jwt', token, { httpOnly: true, maxAge: 300000 });\r\n          try {\r\n            console.log('User logged in event published successfully');\r\n          } catch (error) {\r\n            console.error('Error publishing user logged in event:', error);\r\n            res.status(500).json({ error: 'Internal Server Error' });\r\n          }\r\n          console.log(\"event publish call\");\r\n\r\n          res.status(200).json({ token, user });\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n        res.status(500).send('Internal Server Error');\r\n      }\r\n\r\n    } else {\r\n      const user = await UserModel.findOne({ email });\r\n\r\n      if (user) {\r\n        const payload = {\r\n          userId: user._id,\r\n          email: user.email,\r\n          username: user.username,\r\n          status: user.status\r\n        }\r\n        const token = jwt.sign(payload, jwtSecret, { expiresIn: '1h' });\r\n        res.cookie('jwt', token, { httpOnly: true});\r\n        res.status(200).json({ token });\r\n      } else {\r\n        res.status(203).json({ message: 'Email not found' });\r\n      }\r\n    }\r\n  },\r\n  async sendOtp(req: Request, res: Response) {\r\n    const { email } = req.body;\r\n    try {\r\n      const user = await UserModel.findOne({ email: email });\r\n      const sixDigitOTP = Math.floor(100000 + Math.random() * 900000).toString()\r\n      var mailOptions = {\r\n        from: 'gadgetease.info@gmail.com',\r\n        to: email,\r\n        subject: 'OTP for changing password',\r\n        text: `Your OTP for changing password is ${sixDigitOTP}`\r\n      };\r\n      transporter.sendMail(mailOptions, function (error: Error | null, info: any) {\r\n        if (error) {\r\n          console.log(error);\r\n        } else {\r\n          console.log('Email sent: ' + info.response);\r\n          console.log('otp ', sixDigitOTP);\r\n        }\r\n      });\r\n      if (user) {\r\n        user.otp = sixDigitOTP;\r\n        await user.save();\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  },\r\n  async submitOtp(req: Request, res: Response) {\r\n    const { otp, email } = req.body;\r\n    try {\r\n      const user = await UserModel.findOne({ email, otp });\r\n      if(!user){\r\n        return res.status(404).json({message: \"no user found\"})\r\n      }\r\n      if (otp === user?.otp) {\r\n        res.status(200).json({ message: 'OTP Verification Successfull' });\r\n      } else {\r\n        res.status(401).json({ messge: 'OTP missmatch' });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  },\r\n  async changePassword(req: Request, res: Response){\r\n    const {otp, email, password} = req.body;\r\n    try {\r\n      const hashedPassword = await bcrypt.hash(password, 10)\r\n      const user = await UserModel.findOne({email, otp});\r\n      if(!user){\r\n        return \r\n      }\r\n      if(otp === user.otp){\r\n        user.password = hashedPassword;\r\n        await user.save()\r\n        res.status(200).json({message: 'password changed successfully'})\r\n      }else{\r\n        res.redirect('http://localhost:3000/userhome')\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n};\r\nexport default authController;\r\n","import nodemailer from 'nodemailer'\r\nimport dotenv from 'dotenv'\r\ndotenv.config()\r\n\r\nconst EMAIL = process.env.EMAIL;\r\nconst EMAIL_PASSWORD = process.env.EMAIL_PASSWORD;\r\n\r\n\r\nconst transporter = nodemailer.createTransport({\r\n    service: 'Gmail',\r\n    auth: {\r\n        user: EMAIL,\r\n        pass: EMAIL_PASSWORD\r\n    }\r\n})\r\n\r\nexport default transporter;","// rabbitmq.ts\r\nimport * as amqp from 'amqplib';\r\nimport dotenv from 'dotenv'\r\ndotenv.config();\r\n\r\n\r\nconst rabbitURL: any = process.env.RABBIT_MQ\r\nclass RabbitMQ {\r\n  private static connection: amqp.Connection | null = null;\r\n\r\n  static async getConnection(): Promise<amqp.Connection> {\r\n    try {\r\n      if (!RabbitMQ.connection) {\r\n        RabbitMQ.connection = await amqp.connect(rabbitURL);\r\n      }\r\n      return RabbitMQ.connection as amqp.Connection\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async createChannel(): Promise<amqp.Channel> {\r\n    try {\r\n      const connection = await RabbitMQ.getConnection();\r\n      return connection.createChannel();\r\n    } catch (error) {\r\n      console.error(error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport default RabbitMQ;\r\n","import RabbitMQ from '../messages/rabbitMQ'\r\n\r\nconst userMessagePublisher = {\r\n\r\n    async userMessageEvent(updatedUserData: any): Promise<void> {\r\n        try {\r\n            console.log(\"Starting User MessageRabbitMQ producer...\");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'user-message-exchange';\r\n            const routingKey = 'user-message-created';\r\n            await channel.assertExchange(exchangeName, 'direct', { durable: false });\r\n            channel.publish(exchangeName, routingKey, Buffer.from(JSON.stringify(updatedUserData)));\r\n            await channel.close();\r\n        } catch (error) {\r\n            console.error('Error publishing user messagee event:', error);\r\n        }\r\n},\r\n    async userUpdateMessageEvent(updatedUserData: any): Promise<void> {\r\n        try {\r\n            console.log(\"Starting User update MessageRabbitMQ producer...\");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'user-update-message-exchange';\r\n            const routingKey = 'user-update-message-created';\r\n            await channel.assertExchange(exchangeName, 'direct', { durable: false });\r\n            channel.publish(exchangeName, routingKey, Buffer.from(JSON.stringify(updatedUserData)));\r\n            await channel.close();\r\n        } catch (error) {\r\n            console.error('Error publishing user update messagee event:', error);\r\n        }\r\n},\r\n}\r\n\r\nexport default userMessagePublisher","import express from 'express';\r\nimport userController from '../controller/userController';\r\nimport verifyToken from 'skill-vibe-express-jwt-auth'\r\nimport multerConfig from '../config/multer';\r\n\r\nconst userRouter = express.Router();\r\n\r\nuserRouter.get('/user/userhome', verifyToken, userController.getUserHome);\r\nuserRouter.get('/user/viewAllUsers', userController.getAllUsers)\r\nuserRouter.get('/user/viewallgigs', userController.getAllGigs)\r\nuserRouter.put('/user/userProfileUpdate', multerConfig.single('uploadPic'), userController.userProfileUpdate);\r\nuserRouter.get('/user/mygigs', userController.mygigs)\r\nuserRouter.get('/user/editgig/:gigId',userController.getgig)\r\nuserRouter.get('/user/getallgig', userController.getallgig) \r\nuserRouter.get('/user/viewgig/:id', userController.viewgig);\r\nuserRouter.get('/user/ordergig/:id', userController.orderGig)\r\nuserRouter.get('/user/viewgigdetail/:gigId', userController.viewgigdetail)\r\nuserRouter.post('/user/block', userController.userBlock)\r\nuserRouter.post('/user/unblock', userController.userUnblock)\r\nuserRouter.get('/user/searchGig/:searchId', userController.searchgig)\r\nuserRouter.post('/user/userSpecficDetails', userController.userSpecficDetails)\r\nuserRouter.post('/user/viewGigDetail', userController.viewGigDetail)\r\n\r\n\r\nexport default userRouter;\r\n","import {v2 as cloudinary} from 'cloudinary'\r\nimport dotenv from 'dotenv';\r\ndotenv.config()\r\n\r\ncloudinary.config({\r\n    cloud_name: process.env.CLOUD_NAME,\r\n    api_key: process.env.CLOUD_API_KEY,\r\n    api_secret: process.env.CLOUD_API_SECRET,\r\n  });\r\n  \r\nexport default cloudinary","import { Request, Response } from \"express\";\r\nimport { UserModel, User } from \"../models/User\";\r\nimport bcrypt from 'bcrypt'\r\nimport cloudinary from '../config/cloudinary'\r\nimport jwt, { Secret, JwtPayload } from 'jsonwebtoken'\r\nimport userPublisher from \"../events/publisher/userPublisher\";\r\nimport userGigConsumers from \"../events/consumer/userGigConsumer\";\r\nimport { GigUserModel } from \"../models/GigUser\";\r\nimport dotenv from 'dotenv';\r\nimport orderPublisher from \"../events/publisher/orderPublisher\";\r\ndotenv.config();\r\nimport { ExtendedRequest } from \"../types/usertypes\";\r\nimport userMessagePublisher from \"../events/publisher/userMessagePublisher\";\r\nimport { title } from \"process\";\r\n\r\n\r\nconst jwtSecret: Secret = process.env.JWT_KEY || 'defaultSecret'\r\n\r\n\r\n\r\nconst userController = {\r\n  async setup() {\r\n    try {\r\n      const data: any = await userGigConsumers.gigCreatedConsumer();\r\n      console.log(\"[User Controller]: Data received:\", data);\r\n      const userId = data.userId;\r\n      const user = await UserModel.findById(userId);\r\n      if (user && data) {\r\n        const gigUserData = {\r\n          userId: userId,\r\n          username: user.username,\r\n          phone: user.phone,\r\n          description: user.description,\r\n          email: user.email,\r\n          profilePicture: user.profilePicture,\r\n          status: user.status,\r\n          skills: user.skills,\r\n          availablity: user.availability,\r\n          portfolio: user.portfolio,\r\n          title: data.title,\r\n          gigdescription: data.gigdescription,\r\n          gigstatus: data.status,\r\n          price: data.price,\r\n          tags: data.tags,\r\n          image1: data.image1,\r\n          image2: data.image2,\r\n          image3: data.image3,\r\n          video: data.video,\r\n          refId: data.refId\r\n        }\r\n        const newGigUser = new GigUserModel(gigUserData);\r\n        const savedGigUser = await newGigUser.save();\r\n        console.log(\"gigAdded success\", savedGigUser);\r\n      } else {\r\n        console.log(\"no user and data\");\r\n\r\n      }\r\n      console.log('[User Controller]: RabbitMQ setup completed');\r\n    } catch (error) {\r\n      console.error('[User Controller]: Error setting up RabbitMQ:', error);\r\n    }\r\n  },\r\n  async gigStatusEvent() {\r\n    try {\r\n      const data: any = await userGigConsumers.gigStatusConsumer();\r\n      console.log(\"lslslslls\", data);\r\n      const gigId = data.objectId;\r\n      const statusData = {\r\n        status: data.status\r\n      }\r\n      const objId = await GigUserModel.find({ refId: gigId })\r\n\r\n      const gig = await GigUserModel.findByIdAndUpdate(objId[0]._id, statusData, { new: true });\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n    }\r\n  },\r\n  async gigDeleteEvent() {\r\n    try {\r\n      const data: any = await userGigConsumers.gigDeleteConsumer();\r\n      const gigId = data;\r\n\r\n      const objId = await GigUserModel.find({ refId: gigId })\r\n      const gig = await GigUserModel.findByIdAndDelete(objId[0]._id);\r\n      console.log(\"gig deleted from usergig database\");\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n    }\r\n  },\r\n\r\n  async getUserHome(req: ExtendedRequest, res: Response) {\r\n    const user = req.user;\r\n    const userId = user?.userId\r\n    const userData = await UserModel.findById(userId)\r\n    res.status(200).send(userData)\r\n\r\n\r\n  },\r\n\r\n  async userProfileUpdate(req: any, res: Response) {\r\n    try {\r\n      const folderName = 'skillVibe';\r\n      const updatedData = req.body;\r\n      console.log(req.body);\r\n\r\n\r\n      const token = req.headers.authorization?.split(' ')[1];\r\n\r\n      if (!token) {\r\n        res.status(401).json({ error: 'Unauthorized - Token not provided' });\r\n        return;\r\n      }\r\n\r\n      let decodedToken: JwtPayload;\r\n\r\n      try {\r\n        decodedToken = jwt.verify(token, jwtSecret) as JwtPayload;\r\n      } catch (jwtError) {\r\n        console.error('JWT Verification Error:', jwtError);\r\n        res.status(401).json({ error: 'Unauthorized - Invalid token' });\r\n        return;\r\n      }\r\n      const userId = decodedToken.userId\r\n      if (req.file) {\r\n        const result = await cloudinary.uploader.upload(req.file.path, { public_id: `${folderName}/${req.file.originalname}` });\r\n        updatedData.profilePicture = result.secure_url;\r\n      }\r\n      console.log(\"updated data: \", updatedData);\r\n\r\n\r\n      const user = await UserModel.findByIdAndUpdate(userId, updatedData, { new: true });\r\n      console.log(\"user\", user);\r\n\r\n      userPublisher.userUpdatedEvent(updatedData)\r\n      userMessagePublisher.userUpdateMessageEvent(updatedData)\r\n\r\n      res.status(200).json({ message: 'User profile updated successfully', user });\r\n    } catch (error) {\r\n      console.log('Error handling user profile update:', error);\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n  },\r\n\r\n\r\n  async getAllUsers(req: Request, res: Response) {\r\n    try {\r\n      const PAGE_SIZE = 10\r\n      const page: number = parseInt(req.query.page as string || '0', 10);   \r\n      const total = await UserModel.countDocuments({})\r\n      const allusers = await UserModel.find({}).limit(PAGE_SIZE).skip(PAGE_SIZE * page)\r\n      res.status(200).json({ message: 'user data fetched successfully', allusers, totalPages: Math.ceil(total / PAGE_SIZE) })\r\n    } catch (error) {\r\n      console.log('Error handling user profile update:', error);\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n\r\n  },\r\n  async getAllGigs(req: Request, res: Response) {\r\n    try {\r\n      const PAGE_SIZE = 10\r\n      const page: number = parseInt(req.query.page as string || '0', 10);            \r\n      const total = await GigUserModel.countDocuments({})\r\n      const allgigs = await GigUserModel.find({}).limit(PAGE_SIZE).skip(PAGE_SIZE * page)\r\n      res.status(200).json({ message: 'gig data fetched successfully', allgigs, totalPages: Math.ceil(total / PAGE_SIZE) })\r\n    } catch (error) {\r\n      res.status(500).json({ error: \"internal server error\" })\r\n    }\r\n  },\r\n  async mygigs(req: Request, res: Response) {\r\n    try {\r\n      const token = req.headers.authorization?.split(' ')[1];\r\n      if (!token) {\r\n        return res.status(401).json({ error: 'unauthorized' })\r\n      }\r\n      const decoded = jwt.verify(token, jwtSecret) as JwtPayload\r\n      const userId = decoded.userId;\r\n      const usergigs = await GigUserModel.find({ userId: userId })\r\n      res.status(200).json({ message: 'success', usergigs })\r\n    } catch (error) {\r\n      console.log(error);\r\n      res.status(500).json({ error: \"internal server error\" })\r\n    }\r\n  },\r\n  async getgig(req: Request, res: Response) {\r\n    try {\r\n      const gigId = req.params.gigId\r\n      const gigData = await GigUserModel.find({ refId: gigId })\r\n      res.status(200).json(gigData);\r\n    } catch (error) {\r\n      console.log(error);\r\n      res.status(500).json({ message: \"internal server error\" })\r\n\r\n    }\r\n  },\r\n  async getallgig(req: Request, res: Response) {\r\n    try {\r\n      const token = req.headers.authorization?.split(' ')[1];\r\n      if (!token) {\r\n        return res.status(401).json({ message: \"unauthorized access no token\" })\r\n      }\r\n      const decodedToken = jwt.verify(token, jwtSecret) as JwtPayload;\r\n      const userId = decodedToken.userId;\r\n      const allgigs = await GigUserModel.find({ userId: { $ne: userId }, status: true })\r\n      return res.status(200).json({ message: 'fetched Successfully', allgigs })\r\n\r\n    } catch (err) {\r\n      console.log(err);\r\n\r\n    }\r\n  },\r\n  async viewgig(req: Request, res: Response) {\r\n    try {\r\n      const gigId = req.params.id;\r\n      const gig = await GigUserModel.find({ refId: gigId })\r\n      return res.status(200).json({ message: 'success', gig })\r\n    } catch (error) {\r\n      console.log(error);\r\n      return res.status(500).json(\"internal server error\")\r\n    }\r\n  },\r\n  async orderGig(req: Request, res: Response) {\r\n    try {\r\n      const token = req.headers.authorization?.split(' ')[1];\r\n      if (!token) {\r\n        return res.status(401).json({ message: 'Unauthorized access, no token' });\r\n      }\r\n\r\n      const decodedToken = jwt.verify(token, jwtSecret) as JwtPayload;\r\n      const buyerId = decodedToken.userId;\r\n\r\n      const buyer = await UserModel.findById(buyerId);\r\n\r\n      const gigId = req.params.id;\r\n\r\n      const gig = await GigUserModel.findOne({ refId: gigId });\r\n\r\n      if (!gig) {\r\n        return res.status(404).json({ message: 'Gig not found' });\r\n      }\r\n\r\n      const orderDetails = {\r\n        ...gig.toObject(),\r\n        buyerId,\r\n        buyername: buyer?.username,\r\n        buyeremail: buyer?.email,\r\n        buyerphone: buyer?.phone,\r\n        buyerProfile: buyer?.profilePicture,\r\n      };\r\n      orderPublisher.orderEvent(orderDetails)\r\n      return res.status(200).json({ orderDetails });\r\n    } catch (error) {\r\n      console.error(error);\r\n      return res.status(500).json({ message: 'Internal server error' });\r\n    }\r\n  },\r\n  async viewgigdetail(req: Request, res: Response) {\r\n    try {\r\n      const gigId = req.params.gigId;\r\n      const gig = await GigUserModel.find({ refId: gigId })\r\n      return res.status(200).json({ message: 'Success', gig })\r\n    } catch (error) {\r\n      console.log(error);\r\n      return res.status(501).json({ message: 'Internal error' })\r\n    }\r\n  },\r\n  async gigAccept() {\r\n    const gigId = await userGigConsumers.gigAcceptConsumer()\r\n    console.log('recieved gig id', gigId);\r\n    const gig = await GigUserModel.findOneAndUpdate({ refId: gigId }, { gigstatus: true }, { new: true })\r\n    console.log('accept status updated success', gig);\r\n  },\r\n  async gigReject() {\r\n    const gigId = await userGigConsumers.gigAcceptConsumer()\r\n    console.log('recieved gig id', gigId);\r\n    const gig = await GigUserModel.findOneAndUpdate({ refId: gigId }, { gigstatus: false }, { new: true })\r\n    console.log('accept status updated success', gig);\r\n  },\r\n  async userBlock(req: Request, res: Response) {\r\n    const { userId } = req.body;\r\n    try {\r\n      console.log(userId);\r\n      const user = await UserModel.findByIdAndUpdate(userId, { status: false })\r\n      return res.status(200).json({ message: \"user blocked\" })\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  },\r\n  async userUnblock(req: Request, res: Response) {\r\n    const { userId } = req.body\r\n    try {\r\n      console.log(userId);\r\n      const user = await UserModel.findByIdAndUpdate(userId, { status: true })\r\n      return res.status(200).json({ message: \"user un blocked\" })\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n\r\n  },\r\n  async searchgig(req: Request, res: Response) {\r\n    const token = req.headers.authorization?.split(' ')[1]\r\n    if (!token) {\r\n      return res.status(401).json({ error: 'Unauthorized - Token not provided' });\r\n    }\r\n\r\n    let decodedToken: JwtPayload;\r\n\r\n    try {\r\n      decodedToken = jwt.verify(token, jwtSecret) as JwtPayload;\r\n    } catch (jwtError) {\r\n      console.log('JWT Verification Error:', jwtError);\r\n      return res.status(401).json({ error: 'Unauthorized - Invalid token' });\r\n    }\r\n    try {\r\n      const sort = req.query.sort;\r\n      const filterPrice = req.query.price || 500;\r\n    \r\n      const keyword = req.params.searchId\r\n        ? {\r\n            $or: [\r\n              { username: { $regex: req.params.searchId, $options: \"i\" } },\r\n              { title: { $regex: req.params.searchId, $options: \"i\" } },\r\n            ],\r\n          }\r\n        : {};\r\n    \r\n      let priceFilter = {};\r\n    \r\n      if (filterPrice) {\r\n        // Assuming filterPrice is a single value\r\n        priceFilter = { price: { $lt: filterPrice } };\r\n      }\r\n    \r\n      if (sort === 'High to low') {\r\n        const users = await GigUserModel.find(keyword)\r\n          .find({ _id: { $ne: decodedToken.userId }, ...priceFilter })\r\n          .sort({ price: -1 });\r\n        res.status(200).json(users);\r\n      } else if (sort === 'Low to high') {\r\n        const users = await GigUserModel.find(keyword)\r\n          .find({ _id: { $ne: decodedToken.userId }, ...priceFilter })\r\n          .sort({ price: 1 });\r\n        res.status(200).json(users);\r\n      } else {\r\n        const users = await GigUserModel.find(keyword)\r\n          .find({ _id: { $ne: decodedToken.userId }, ...priceFilter })\r\n          .exec();\r\n        res.status(200).json(users);\r\n      }\r\n    } catch (error) {\r\n      res.status(501).json({ error: \"Internal server error\" });\r\n      console.error(error);\r\n    }\r\n  },\r\n  async userSpecficDetails(req: Request, res: Response){\r\n    const {userId} = req.body\r\n    try {\r\n      const users = await UserModel.findById(userId)\r\n      res.status(200).json(users)\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).json({error: \"Internal server error\"})\r\n    }\r\n  },\r\n  async viewGigDetail(req: Request, res: Response){\r\n    const {gigId} = req.body    \r\n    try {\r\n      const gigData = await GigUserModel.find({refId: gigId})\r\n      res.status(200).json(gigData)\r\n    } catch (error) {\r\n      res.status(500).json({message: \"Internal server error\"})\r\n      console.error(error);\r\n      \r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default userController","import RabbitMQ from '../messages/rabbitMQ'\r\n\r\n\r\n\r\n\r\nconst userPublisher = {\r\n\r\n    async userUpdatedEvent(updatedUserData: any): Promise<void> {\r\n        try {\r\n            console.log(\"Starting RabbitMQ producer...\");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'user-exchange';\r\n            const routingKey = 'user-created';\r\n            await channel.assertExchange(exchangeName, 'direct', { durable: false });\r\n            channel.publish(exchangeName, routingKey, Buffer.from(JSON.stringify(updatedUserData)));\r\n            await channel.close();\r\n        } catch (error) {\r\n            console.error('Error publishing user update  event:', error);\r\n        }\r\n}\r\n}\r\n\r\nexport default userPublisher","import RabbitMQ from \"../messages/rabbitMQ\";\r\n\r\nconst userGigConsumers ={\r\n    async gigCreatedConsumer(){\r\n        try{\r\n            console.log(\"starting rabbit mq channel \");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'gig-exchange';\r\n            const queueName = 'gig-service-queue';\r\n            await channel.assertExchange(exchangeName, 'direct', {durable: false});\r\n            const {queue} = await channel.assertQueue(queueName, {durable: false});\r\n            const routingKey = 'gig-created';\r\n            await channel.bindQueue(queue ,exchangeName, routingKey);\r\n            return new Promise((resolve ,reject)=>{\r\n                channel.consume(queue, (message)=>{\r\n                    if(message){\r\n                        try {\r\n                            const createdGig: any = JSON.parse(message.content.toString());\r\n                            channel.ack(message);\r\n                            resolve(createdGig)\r\n                        } catch (error) {\r\n                            console.error(\"error processing gig creation\");\r\n                            channel.ack(message);\r\n                            reject(error)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            await channel.close()\r\n            \r\n        }catch(err){\r\n            console.error(\"error setting up consumer\", err)\r\n        }\r\n    },\r\n    async gigStatusConsumer(){\r\n        try{\r\n            console.log(\"starting rabbit mq channel \");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'gig-exchange';\r\n            const queueName = 'gig-service-queue';\r\n            await channel.assertExchange(exchangeName, 'direct', {durable: false});\r\n            const {queue} = await channel.assertQueue(queueName, {durable: false});\r\n            const routingKey = 'gig-status-created';\r\n            await channel.bindQueue(queue ,exchangeName, routingKey);\r\n            return new Promise((resolve ,reject)=>{\r\n                channel.consume(queue, (message)=>{\r\n                    if(message){\r\n                        try {\r\n                            const createdGig: any = JSON.parse(message.content.toString());\r\n                            channel.ack(message);\r\n                            resolve(createdGig)\r\n                        } catch (error) {\r\n                            console.error(\"error processing gig creation\");\r\n                            channel.ack(message);\r\n                            reject(error)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            await channel.close()\r\n            \r\n        }catch(err){\r\n            console.error(\"error setting up consumer\", err)\r\n        }\r\n    },\r\n    async gigDeleteConsumer(){\r\n        try{\r\n            console.log(\"starting rabbit mq channel \");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'gig-exchange';\r\n            const queueName = 'gig-delete-queue';\r\n            await channel.assertExchange(exchangeName, 'direct', {durable: false});\r\n            const {queue} = await channel.assertQueue(queueName, {durable: false});\r\n            const routingKey = 'gig-delete-created';\r\n            await channel.bindQueue(queue ,exchangeName, routingKey);\r\n            return new Promise((resolve ,reject)=>{\r\n                channel.consume(queue, (message)=>{\r\n                    if(message){\r\n                        try {\r\n                            const createdGig: any = JSON.parse(message.content.toString());\r\n                            channel.ack(message);\r\n                            resolve(createdGig)\r\n                        } catch (error) {\r\n                            console.error(\"error processing gig creation\");\r\n                            channel.ack(message);\r\n                            reject(error)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            await channel.close()\r\n            \r\n        }catch(err){\r\n            console.error(\"error setting up consumer\", err)\r\n        }\r\n    },\r\n    async gigAcceptConsumer(){\r\n        try{\r\n            console.log(\"starting rabbit mq channel \");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'gig-exchange';\r\n            const queueName = 'gig-accept-queue';\r\n            await channel.assertExchange(exchangeName, 'direct', {durable: false});\r\n            const {queue} = await channel.assertQueue(queueName, {durable: false});\r\n            const routingKey = 'gig-status-accept-created';\r\n            await channel.bindQueue(queue ,exchangeName, routingKey);\r\n            return new Promise((resolve ,reject)=>{\r\n                channel.consume(queue, (message)=>{\r\n                    if(message){\r\n                        try {\r\n                            const createdGig: any = JSON.parse(message.content.toString());\r\n                            channel.ack(message);\r\n                            resolve(createdGig)\r\n                        } catch (error) {\r\n                            console.error(\"error processing gig creation\");\r\n                            channel.ack(message);\r\n                            reject(error)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            await channel.close()\r\n            \r\n        }catch(err){\r\n            console.error(\"error setting up consumer\", err)\r\n        }\r\n    },\r\n    async gigRejectConsumer(){\r\n        try{\r\n            console.log(\"starting rabbit mq channel \");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'gig-exchange';\r\n            const queueName = 'gig-reject-queue';\r\n            await channel.assertExchange(exchangeName, 'direct', {durable: false});\r\n            const {queue} = await channel.assertQueue(queueName, {durable: false});\r\n            const routingKey = 'gig-status-reject-created';\r\n            await channel.bindQueue(queue ,exchangeName, routingKey);\r\n            return new Promise((resolve ,reject)=>{\r\n                channel.consume(queue, (message)=>{\r\n                    if(message){\r\n                        try {\r\n                            const createdGig: any = JSON.parse(message.content.toString());\r\n                            channel.ack(message);\r\n                            resolve(createdGig)\r\n                        } catch (error) {\r\n                            console.error(\"error processing gig creation\");\r\n                            channel.ack(message);\r\n                            reject(error)\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            await channel.close()\r\n            \r\n        }catch(err){\r\n            console.error(\"error setting up consumer\", err)\r\n        }\r\n    },\r\n}\r\n\r\nexport default userGigConsumers;","import { Schema, model } from \"mongoose\";\r\nimport { GigUser } from \"../types/usertypes\";\r\n\r\nconst skillSchema = new Schema({\r\n  value: String,\r\n  label: String,\r\n});\r\n\r\nconst GigUserSchema = new Schema<GigUser>({\r\n  userId:{\r\n    type: String,\r\n\r\n  },\r\n  refId: {\r\n    type: String,\r\n  },\r\n  username: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  phone: {\r\n    type: Number,\r\n  },\r\n  description: {\r\n    type: String\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  profilePicture: {\r\n    type: String,\r\n    default: 'https://res.cloudinary.com/dihrwghx2/image/upload/v1699291554/admin-user-react/default-pic_rkk3gl.jpg'\r\n  },\r\n  status: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  ordersRecieved:{\r\n    type: Schema.Types.ObjectId\r\n  },\r\n  skills: {\r\n    type: [skillSchema],\r\n    default: [],\r\n  },\r\n  availability: {\r\n    type: Boolean,\r\n  },\r\n  portfolio: {\r\n    type: Schema.Types.ObjectId,\r\n    ref: \"Portfolio\",\r\n  },\r\n  title: {\r\n    type: String,\r\n  },\r\n  gigdescription: {\r\n    type: String,\r\n  },\r\n  gigstatus: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  price: {\r\n    type: Number,\r\n  },\r\n  tags: {\r\n    type: String,\r\n  },\r\n  image1: {\r\n    type: String,\r\n\r\n  },\r\n  image2: {\r\n    type: String,\r\n\r\n  },\r\n  image3: {\r\n    type: String,\r\n\r\n  },\r\n  video: {\r\n    type: String,\r\n    default: '',\r\n  },\r\n});\r\n\r\nconst GigUserModel = model<GigUser>(\"GigUser\", GigUserSchema);\r\n\r\nexport { GigUser, GigUserModel };\r\n","import RabbitMQ from '../messages/rabbitMQ';\r\nconst orderPublisher = {\r\n    async orderEvent(orderDetails: any): Promise<void>{\r\n        try {\r\n            console.log(\"Starting RabbitMQ producer...\");\r\n            const channel = await RabbitMQ.createChannel();\r\n            const exchangeName = 'order-exchange';\r\n            const routingKey = 'order-created';\r\n            await channel.assertExchange(exchangeName, 'direct', { durable: false });\r\n            channel.publish(exchangeName, routingKey, Buffer.from(JSON.stringify(orderDetails)));\r\n            await channel.close();\r\n            console.log('channel closed order');\r\n        } catch (error) {\r\n            console.log('error publishing order details event ');\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default orderPublisher","import { Request } from 'express';\r\nimport multer, { FileFilterCallback, Multer } from 'multer';\r\nimport path from 'path';\r\nimport {ParsedQs} from '../types/usertypes';\r\n\r\nexport default  multer({\r\n  storage: multer.diskStorage({}),\r\n  fileFilter: (\r\n    req: Request<any, any, any, ParsedQs>,\r\n    file: Express.Multer.File,\r\n    cb: FileFilterCallback\r\n  ) => {\r\n    let ext = path.extname(file.originalname);\r\n    if (ext !== '.jpg' && ext !== '.jpeg' && ext !== '.png') {\r\n      cb(null, false);\r\n      return;\r\n    }\r\n    cb(null, true);\r\n  },\r\n}) as Multer;\r\n"],"mappings":"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","names":["express","dotenv","dotenv","dotenv","dotenv","dotenv","email","username","express","dotenv","jwt","Schema","model","skillSchema","Schema","model","dotenv","dotenv","jwtSecret","jwt","express","express","dotenv"]}